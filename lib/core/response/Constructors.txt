//? Dart
class User {
  String name;
  int age;

  // Positional constructor
  User(this.name, this.age);

  // Named constructor
  User.withName(this.name) : age = 0;
}

void main() {
  var user1 = User('Alice', 30);
  var user2 = User.withName('Bob');
  print('${user1.name}, ${user1.age}'); // Alice, 30
  print('${user2.name}, ${user2.age}'); // Bob, 0
}

//c#
class User {
    public string Name;
    public int Age;

    // Constructor
    public User(string name, int age) {
        Name = name;
        Age = age;
    }

    // Overloaded constructor
    public User(string name) {
        Name = name;
        Age = 0;
    }
}

// Usage
var user1 = new User("Alice", 30);
var user2 = new User("Bob");
Console.WriteLine($"{user1.Name}, {user1.Age}"); // Alice, 30
Console.WriteLine($"{user2.Name}, {user2.Age}"); // Bob, 0

//? typescript
class User {
  name: string;
  age: number;

  constructor(name: string, age: number);
  constructor(name: string);
  constructor(name: string, age?: number) {
    this.name = name;
    this.age = age ?? 0;
  }
}

const user1 = new User("Alice", 30);
const user2 = new User("Bob");
console.log(`${user1.name}, ${user1.age}`); // Alice, 30
console.log(`${user2.name}, ${user2.age}`); // Bob, 0

// 2. Factory Methods

class User {
  final String name;
  final int age;

  User(this.name, this.age);

  factory User.fromJson(Map<String, dynamic> json) {
    return User(json['name'], json['age']);
  }
}

void main() {
  var json = {'name': 'Alice', 'age': 30};
  var user = User.fromJson(json);
  print('${user.name}, ${user.age}'); // Alice, 30
}
//c#
class User {
    public string Name { get; }
    public int Age { get; }

    public User(string name, int age) {
        Name = name;
        Age = age;
    }

    // Factory method
    public static User FromJson(string json) {
        var data = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(json);
        return new User(data["name"].ToString(), Convert.ToInt32(data["age"]));
    }
}

// Usage
string json = "{\"name\":\"Alice\", \"age\":30}";
User user = User.FromJson(json);
Console.WriteLine($"{user.Name}, {user.Age}"); // Alice, 30

//? typescript
class User {
  constructor(public name: string, public age: number) {}

  static fromJson(json: any): User {
    return new User(json.name, json.age);
  }
}

const json = { name: "Alice", age: 30 };
const user = User.fromJson(json);
console.log(`${user.name}, ${user.age}`); // Alice, 30

// 3. Sealed Classes / Exhaustive Types

// Dart
sealed class Shape {}

class Circle extends Shape {
  final double radius;
  Circle(this.radius);
}

class Square extends Shape {
  final double side;
  Square(this.side);
}

String describeShape(Shape shape) {
  return switch (shape) {
    Circle(radius: var r) => 'Circle with radius $r',
    Square(side: var s) => 'Square with side $s',
  };
}

void main() {
  var shape = Circle(5);
  print(describeShape(shape)); // Circle with radius 5
}

//C#
public abstract sealed class Shape permits Circle, Square {}

public sealed class Circle : Shape {
    public double Radius { get; }
    public Circle(double radius) => Radius = radius;
}

public sealed class Square : Shape {
    public double Side { get; }
    public Square(double side) => Side = side;
}

public static string DescribeShape(Shape shape) => shape switch {
    Circle c => $"Circle with radius {c.Radius}",
    Square s => $"Square with side {s.Side}",
    _ => "Unknown shape"
};

// Usage
var shape = new Circle(5);
Console.WriteLine(DescribeShape(shape)); // Circle with radius 5

//? typescript
type Shape =
  | { kind: 'circle'; radius: number }
  | { kind: 'square'; side: number };

function describeShape(shape: Shape): string {
  switch (shape.kind) {
    case 'circle':
      return `Circle with radius ${shape.radius}`;
    case 'square':
      return `Square with side ${shape.side}`;
  }
}

const shape: Shape = { kind: 'circle', radius: 5 };
console.log(describeShape(shape)); // Circle with radius 5

